excercise1: copy paste start----

Pull an image from Docker Hub and run it as a container
Use the docker CLI to list your images.
docker images
You should see an empty table (with only headings) since you don't have any images yet.



Pull your first image from Docker Hub.
docker pull hello-world


List images again.
docker images
You should now see the hello-world image present in the table.



Run the hello-world image as a container.
docker run hello-world
You should see a 'Hello from Docker!' message.

There will also be an explanation of what Docker did to generate this message.



List the containers to see that your container ran and exited successfully.
docker ps -a
Among other things, for this container you should see a container ID, the image name (hello-world), and a status that indicates that the container exited successfully.



Note the CONTAINER ID from the previous output and replace the \ tag in the command below with this value. This command removes your container.
docker container rm <container_id>


Verify that that the container has been removed. Run the following command.
docker ps -a


Congratulations on pulling an image from Docker Hub and running your first container! Now let's try and build our own image.



---exercise1 handson starts ---
theia@theiadocker-anupamalal07:/home/project$  docker --version
Docker version 20.10.7, build 20.10.7-0ubuntu5~18.04.3
theia@theiadocker-anupamalal07:/home/project$ ibmcloud version
ibmcloud version 2.11.1+c18277d-2022-09-23T21:49:24+00:00
theia@theiadocker-anupamalal07:/home/project$ pwd
/home/project
theia@theiadocker-anupamalal07:/home/project$ theia@theiadocker-anupamalal07:/home/project$  docker --version
Docker version 20.10.7, build 20.10.7-0ubuntu5~18.04.3
theia@theiadocker-anupamalal07:/home/project$ ibmcloud version
ibmcloud version 2.11.1+c18277d-2022-09-23T21:49:24+00:00
theia@theiadocker-anupamalal07:/home/project$ pwd
/home/project
theia@theiadocker-anupamalal07:/home/project$ theia@theiadocker-anupamalal07:/home/project$  docker --version
Docker version 20.10.7, build 20.10.7-0ubuntu5~18.04.3
theia@theiadocker-anupamalal07:/home/project$ ibmcloud version
ibmcloud version 2.11.1+c18277d-2022-09-23T21:49:24+00:00
theia@theiadocker-anupamalal07:/home/project$ pwd
/home/project
theia@theiadocker-anupamalal07:/home/project$ [ -d 'CC201' ]
theia@theiadocker-anupamalal07:/home/project$ echo $?
1
theia@theiadocker-anupamalal07:/home/project$ git clone https://github.com/ibm-developer-skills-network/CC201.git
Cloning into 'CC201'...
remote: Enumerating objects: 30, done.
remote: Counting objects: 100% (30/30), done.
remote: Compressing objects: 100% (23/23), done.
remote: Total 30 (delta 14), reused 14 (delta 6), pack-reused 0
Unpacking objects: 100% (30/30), done.
theia@theiadocker-anupamalal07:/home/project$ ls
CC201
theia@theiadocker-anupamalal07:/home/project$ [ -d 'CC201' ]
theia@theiadocker-anupamalal07:/home/project$ echo $?
0
theia@theiadocker-anupamalal07:/home/project$ theia@theiadocker-anupamalal07:/home/project$  docker --version
Docker version 20.10.7, build 20.10.7-0ubuntu5~18.04.3
theia@theiadocker-anupamalal07:/home/project$ ibmcloud version
ibmcloud version 2.11.1+c18277d-2022-09-23T21:49:24+00:00
theia@theiadocker-anupamalal07:/home/project$ pwd
/home/project
theia@theiadocker-anupamalal07:/home/project$ [ -d 'CC201' ]
theia@theiadocker-anupamalal07:/home/project$ echo $?
1
theia@theiadocker-anupamalal07:/home/project$ git clone https://github.com/ibm-developer-skills-network/CC201.git
Cloning into 'CC201'...
remote: Enumerating objects: 30, done.
remote: Counting objects: 100% (30/30), done.
remote: Compressing objects: 100% (23/23), done.
remote: Total 30 (delta 14), reused 14 (delta 6), pack-reused 0
Unpacking objects: 100% (30/30), done.
theia@theiadocker-anupamalal07:/home/project$ ls
CC201
theia@theiadocker-anupamalal07:/home/project$ [ -d 'CC201' ]
theia@theiadocker-anupamalal07:/home/project$ echo $?
0
theia@theiadocker-anupamalal07:/home/project$ cd CC201/
.git/       .gitignore  labs/       LICENSE     README.md   
theia@theiadocker-anupamalal07:/home/project$ cd CC201/labs/
1_ContainersAndDocker/ 2_IntroKubernetes/     3_K8sScaleAndUpdate/   
theia@theiadocker-anupamalal07:/home/project$ cd CC201/labs/1_ContainersAndDocker/
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ ls
app.js  Dockerfile  package.json
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ 
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker images
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ ls
app.js  Dockerfile  package.json
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ vi Dockerfile 
bash: vi: command not found
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ emacs Dockerfile 
bash: emacs: command not found
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ cat Dockerfile 
FROM node:9.4.0-alpine
COPY app.js .
COPY package.json .
RUN npm install &&\
    apk update &&\
    apk upgrade
EXPOSE  8080
CMD node app.js
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker pull hello-world
Using default tag: latest
latest: Pulling from library/hello-world
2db29710123e: Pull complete 
Digest: sha256:e18f0a777aefabe047a671ab3ec3eed05414477c951ab1a6f352a06974245fe7
Status: Downloaded newer image for hello-world:latest
docker.io/library/hello-world:latest
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker images
REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
hello-world   latest    feb5d9fea6a5   13 months ago   13.3kB
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker run hello-world

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/

theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker ps -a
CONTAINER ID   IMAGE         COMMAND    CREATED              STATUS                          PORTS     NAMES
9685e24406c0   hello-world   "/hello"   About a minute ago   Exited (0) About a minute ago             romantic_meitner
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker container rm 9685e24406c0
9685e24406c0
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ 



Exercise 2 - copy paste starts---------------------------------------------------
Build an image using a Dockerfile
The current working directory contains a simple Node.js application that we will run in a container. The app will print a hello message along with the hostname. The following files are needed to run the app in a container:
app.js is the main application, which simply replies with a hello world message.
package.json defines the dependencies of the application.
Dockerfile defines the instructions Docker uses to build the image.
Use the Explorer to view the files needed for this app. Click the Explorer icon (it looks like a sheet of paper) on the left side of the window, and then navigate to the directory for this lab: CC201 > labs > 1_ContainersAndDocker. Click Dockerfile to view the commands required to build an image.
Dockerfile in Explorer

You can refresh your understanding of the commands mentioned in the Dockerfile below:
The FROM instruction initializes a new build stage and specifies the base image that subsequent instructions will build upon.
The COPY command enables us to copy files to our image.
The RUN instruction executes commands.
The EXPOSE instruction exposes a particular port with a specified protocol inside a Docker Container.
The CMD instruction provides a default for executing a container, or in other words, an executable that should run in your container.

Run the following command to build the image:
docker build . -t myimage:v1
As seen in the module videos, the output creates a new layer for each instruction in the Dockerfile.



List images to see your image tagged myimage:v1 in the table.
docker images


Note that compared to the hello-world image, this image has a different image ID. This means that the two images consist of different layers -- in other words, they're not the same image.

You should also see a node image in the images output. This is because the docker build command pulled node:9.4.0-alpine to use it as the base image for the image you built.

Exercise2 solution starts-----------------------------------------------------------
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ ls
app.js  Dockerfile  package.json
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ cat app.js
var express = require('express')
var os = require("os");
var hostname = os.hostname();
var app = express()

app.get('/', function(req, res) {
  res.send('Hello world from ' + hostname + '! Your app is up and running!\n')
})
app.listen(8080, function() {
  console.log('Sample app is listening on port 8080.')
})
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ ls
app.js  Dockerfile  package.json
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ cat package.json 
{
  "name": "hello-world-demo",
  "private": false,
  "version": "0.0.1",
  "description": "Basic hello world application for Node.js",
  "dependencies": {
    "express": "4.x"
  }
}
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker build . -t myimage:v1
Sending build context to Docker daemon  4.096kB
Step 1/6 : FROM node:9.4.0-alpine
9.4.0-alpine: Pulling from library/node
605ce1bd3f31: Pull complete 
fe58b30348fe: Pull complete 
46ef8987ccbd: Pull complete 
Digest: sha256:9cd67a00ed111285460a83847720132204185e9321ec35dacec0d8b9bf674adf
Status: Downloaded newer image for node:9.4.0-alpine
 ---> b5f94997f35f
Step 2/6 : COPY app.js .
 ---> 9a4902e67219
Step 3/6 : COPY package.json .
 ---> b0b980e771f3
Step 4/6 : RUN npm install &&    apk update &&    apk upgrade
 ---> Running in f95fbb6c64dd
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN hello-world-demo@0.0.1 No repository field.
npm WARN hello-world-demo@0.0.1 No license field.

added 57 packages in 2.827s
fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/community/x86_64/APKINDEX.tar.gz
v3.6.5-44-gda55e27396 [http://dl-cdn.alpinelinux.org/alpine/v3.6/main]
v3.6.5-34-gf0ba0b43d5 [http://dl-cdn.alpinelinux.org/alpine/v3.6/community]
OK: 8448 distinct packages available
Upgrading critical system libraries and apk-tools:
(1/1) Upgrading apk-tools (2.7.5-r0 -> 2.7.6-r0)
Executing busybox-1.26.2-r9.trigger
Continuing the upgrade transaction with new apk-tools:
(1/7) Upgrading musl (1.1.16-r14 -> 1.1.16-r15)
(2/7) Upgrading busybox (1.26.2-r9 -> 1.26.2-r11)
Executing busybox-1.26.2-r11.post-upgrade
(3/7) Upgrading libressl2.5-libcrypto (2.5.5-r0 -> 2.5.5-r2)
(4/7) Upgrading libressl2.5-libssl (2.5.5-r0 -> 2.5.5-r2)
(5/7) Installing libressl2.5-libtls (2.5.5-r2)
(6/7) Installing ssl_client (1.26.2-r11)
(7/7) Upgrading musl-utils (1.1.16-r14 -> 1.1.16-r15)
Executing busybox-1.26.2-r11.trigger
OK: 5 MiB in 15 packages
Removing intermediate container f95fbb6c64dd
 ---> b1278b975187
Step 5/6 : EXPOSE  8080
 ---> Running in aad71164e50d
Removing intermediate container aad71164e50d
 ---> 4ac36b8a1908
Step 6/6 : CMD node app.js
 ---> Running in 7bd56ff2b81e
Removing intermediate container 7bd56ff2b81e
 ---> 746e48096c1e
Successfully built 746e48096c1e
Successfully tagged myimage:v1
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ docker images
REPOSITORY    TAG            IMAGE ID       CREATED          SIZE
myimage       v1             746e48096c1e   47 seconds ago   77.2MB
hello-world   latest         feb5d9fea6a5   13 months ago    13.3kB
node          9.4.0-alpine   b5f94997f35f   4 years ago      68MB
theia@theiadocker-anupamalal07:/home/project/CC201/labs/1_ContainersAndDocker$ 


